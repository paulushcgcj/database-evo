CREATE SCHEMA IF NOT EXISTS security;

CREATE TABLE IF NOT EXISTS security.users(
	username varchar(50) not null primary key,
	password varchar(500) not null,
	enabled boolean not null,
	expiration timestamp with time zone NULL,
    locked bool NOT NULL DEFAULT false,
    credential_expiration timestamp with time zone NOT NULL DEFAULT (now() + '1 mon'::interval)
);

CREATE TABLE IF NOT EXISTS security.authority_list (
	authority varchar(50) not null primary key
);

INSERT INTO security.authority_list(authority) values
('CAN_READ'),
('CAN_WRITE'),
('CAN_REMOVE'),
('CAN_ENABLE'),
('CAN_IMPERSONATE')
ON CONFLICT DO NOTHING;

CREATE TABLE IF NOT EXISTS security.authorities (
	username varchar(50) not null,
	authority varchar(50) not null,
	constraint fk_authorities_users foreign key(username) references security.users(username),
	constraint fk_authorities_authority foreign key(authority) references security.authority_list(authority)
);

CREATE UNIQUE index IF NOT EXISTS ix_auth_username on security.authorities (username,authority);

CREATE TABLE IF NOT EXISTS security.groups (
	id bigint generated by default as identity(start with 1) primary key,
	group_name varchar(50) not null
);

INSERT INTO security.groups(group_name) values
('ADMIN'),
('USER'),
('READER')
ON CONFLICT DO NOTHING;

CREATE TABLE IF NOT EXISTS security.group_authorities (
	group_id bigint not null,
	authority varchar(50) not null,
	constraint fk_group_authorities_group foreign key(group_id) references security.groups(id),
	constraint fk_group_authorities_authority foreign key(authority) references security.authority_list(authority),
    CONSTRAINT group_authorities_un UNIQUE (group_id,authority)
);

INSERT INTO security.group_authorities(group_id,authority) values
((SELECT id from security.groups WHERE group_name = 'ADMIN'),'CAN_READ'),
((SELECT id from security.groups WHERE group_name = 'ADMIN'),'CAN_WRITE'),
((SELECT id from security.groups WHERE group_name = 'ADMIN'),'CAN_REMOVE'),
((SELECT id from security.groups WHERE group_name = 'ADMIN'),'CAN_ENABLE'),
((SELECT id from security.groups WHERE group_name = 'ADMIN'),'CAN_IMPERSONATE'),
((SELECT id from security.groups WHERE group_name = 'USER'),'CAN_READ'),
((SELECT id from security.groups WHERE group_name = 'USER'),'CAN_WRITE'),
((SELECT id from security.groups WHERE group_name = 'READER'),'CAN_READ')
ON CONFLICT DO NOTHING;

CREATE TABLE IF NOT EXISTS security.group_members (
	id bigint generated by default as identity(start with 1) primary key,
	username varchar(50) not null,
	group_id bigint not null,
	constraint fk_group_members_group foreign key(group_id) references security.groups(id)
);